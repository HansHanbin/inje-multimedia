/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF, OrbitControls, PerspectiveCamera } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

export default function Model(props) {
  const angleToRadians = (angleInDeg) => (Math.PI / 180) * angleInDeg;
  const { nodes, materials } = useGLTF("/prismModel.glb");
  const orbitControlsRef = useRef(null);

  useFrame((state) => {
    if (!!orbitControlsRef.current) {
      const { x, y } = state.mouse;
      orbitControlsRef.current.setAzimuthalAngle(-x * angleToRadians(360));
      orbitControlsRef.current.setPolarAngle((y + 0.5) * angleToRadians(180));
      orbitControlsRef.current.update();
    }
  });

  return (
    <>
      <PerspectiveCamera
        makeDefault
        position={[0, 1, 5]}
        autoRotateSpeed={false}
      />

      <OrbitControls
        enableZoom={false}
        ref={orbitControlsRef}
        minPolarAngle={angleToRadians(10)}
        maxPolarAngle={angleToRadians(90)}
      />
      <group {...props} dispose={null}>
        <group
          position={[0, 0, 0]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.008}
        >
          <mesh
            geometry={nodes.Platonic_1.geometry}
            material={materials["Material.001"]}
            position={[0, 0, 0]}
            rotation={[0.18, 0.18, 1.51]}
          >
            <meshPhysicalMaterial color="blue" metalness="0.1" ior="2" />
          </mesh>
        </group>
      </group>
    </>
  );
}

useGLTF.preload("/prismModel.glb");
